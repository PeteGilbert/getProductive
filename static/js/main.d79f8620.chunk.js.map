{"version":3,"sources":["firebase.js","ShowGoals.js","NewGoals.js","ChooseTask.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ShowGoals","props","state","goals","dbRef","database","ref","this","un","ismounted","on","response","newState","data","val","Object","values","forEach","obj","push","name","setState","className","map","goal","key","React","Component","NewGoals","addGoal","newGoal","physical","mental","energy","child","set","alert","handleChange","event","target","value","button","instructions","numberOfGoals","onClick","selectActive","aria-label","type","placeholder","onChange","htmlFor","min","max","ChooseTask","showForm","preventDefault","submit","winner","x","currentBestVal","currentBestName","Math","abs","currentPhys","currentMent","currentEnergy","console","log","bestOption","complete","remove","checkTaskCount","App","handleChangeUN","currentUN","login","userNames","includes","choosingGoals","isLoggedIn","keys","length","choosingTask","once","required","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d79f8620.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBUg2ChT4L_XQS5_FOwPpAD8Ki4E1yR9_s\",\r\n    authDomain: \"project5-8ad8a.firebaseapp.com\",\r\n    databaseURL: \"https://project5-8ad8a.firebaseio.com\",\r\n    projectId: \"project5-8ad8a\",\r\n    storageBucket: \"project5-8ad8a.appspot.com\",\r\n    messagingSenderId: \"238062275039\",\r\n    appId: \"1:238062275039:web:7f9016ed5fc1e97f62dc6a\"\r\n};\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;\r\n","import React from 'react';\r\nimport firebase from './firebase';\r\n\r\n//Renders a list of the goals within the current user's firebase object\r\n\r\nclass ShowGoals extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            goals: [],\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const dbRef = firebase.database().ref(this.props.un)\r\n        this.ismounted = true\r\n        //Pushing the name value within the firebase object to an array in state\r\n        dbRef.on('value', (response) => {\r\n            const newState = [];\r\n            const data = response.val();\r\n            let arr = Object.values(data)\r\n            arr.forEach((obj) => {\r\n                newState.push({\r\n                    name: obj.name,\r\n                })\r\n            })\r\n            //allows component unmount to prevent memory leak without turning off firebase\r\n            if (this.ismounted){\r\n                this.setState({\r\n                    goals: newState\r\n                })\r\n            }\r\n        })\r\n    }\r\n\r\n    // prevents memory leak\r\n    componentWillUnmount() {\r\n        this.ismounted = false\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>Current Goals:</h2>\r\n                <ul className=\"goalContainer\">\r\n                    {this.state.goals.map((goal) => {\r\n                        return (\r\n                        <div className=\"goalDisplay\" key ={goal.name}>\r\n                            <h3>{goal.name}</h3>\r\n                        </div>\r\n                        )\r\n                    })}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ShowGoals;","import React from 'react';\r\nimport firebase from './firebase';\r\nimport ShowGoals from './ShowGoals';\r\n\r\n//Allows the user to populate firebase with goals\r\n\r\nclass NewGoals extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            newGoal: \"\",\r\n            physical: 0,\r\n            mental: 0,\r\n            energy: 0,\r\n        }\r\n    }\r\n\r\n    addGoal = () => {\r\n        if (this.state.newGoal !== \"\"){\r\n            //push goal object to FB\r\n            const dbRef = firebase.database().ref(this.props.un)\r\n            let goal = {\r\n                name: this.state.newGoal,\r\n                physical: this.state.physical,\r\n                mental: this.state.mental,\r\n                energy: this.state.energy,\r\n            }\r\n            dbRef.child(this.state.newGoal).set(goal)\r\n            this.setState({\r\n                newGoal: \"\",\r\n                physical: 0,\r\n                mental: 0,\r\n                energy: 0,\r\n            })\r\n        }else{\r\n            alert('Please enter a name for your goal!')\r\n        }\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState ({\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n\r\n\r\n    render () {\r\n        let button;\r\n        let instructions;\r\n        // only renders the button that allows users to choose a task when they have 3 or more goals stored in Firebase.\r\n        if (this.props.numberOfGoals > 2){\r\n            button = <button name=\"choosingTask\" onClick={this.props.selectActive}>Choose Task</button>\r\n            instructions = <h2>You can either add more goals or click the Choose Task button to have a task selected for you!</h2>\r\n        }else{\r\n            instructions = <h2>I'm going to need at least 3 goals in order to recommend a task for you!</h2>\r\n        }\r\n\r\n        return (\r\n            <div className=\"centered\">\r\n                {instructions}\r\n                <form className=\"newGoalsForm\">\r\n                    <input aria-label=\"Enter your goal here\" type=\"text\" placeholder=\"Enter your goal here!\"  name=\"newGoal\" onChange={this.handleChange} value={this.state.newGoal}/>\r\n\r\n                    <div className=\"inputPair\">\r\n                        <label htmlFor=\"physical\">How physically demanding is this goal?</label>\r\n                        <input type=\"range\" min=\"0\" max=\"10\" name=\"physical\"  onChange={this.handleChange} value={this.state.physical}/>\r\n                    </div>\r\n\r\n                    <div className=\"inputPair\">\r\n                        <label htmlFor=\"mental\">How mentally demanding is this goal?</label>\r\n                        <input type=\"range\" min=\"0\" max=\"10\" name=\"mental\" onChange={this.handleChange} value={this.state.mental}/>\r\n                    </div>\r\n\r\n                    <div className=\"inputPair\">\r\n                        <label htmlFor=\"energy\">How tiring is this goal?</label>\r\n                        <input type=\"range\" min=\"0\" max=\"10\" name=\"energy\" onChange={this.handleChange} value={this.state.energy}/>\r\n                    </div>\r\n                </form>\r\n                <button onClick={this.addGoal}>Add Goal</button>\r\n                {button}\r\n                <ShowGoals un={this.props.un} />\r\n            </div>\r\n        )\r\n            \r\n    }\r\n}\r\n\r\nexport default NewGoals","import React from 'react';\r\nimport firebase from './firebase';\r\nimport ShowGoals from './ShowGoals';\r\n\r\n//Displays goals and compares users current mood to the requirements of each goal to suggest which is most appropriate.\r\n\r\nclass ChooseTask extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            goals: [],\r\n            showForm: false,\r\n            currentPhys: 0,\r\n            currentMent: 0,\r\n            currentEnergy: 0,\r\n            bestOption: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const dbRef = firebase.database().ref(this.props.un)\r\n        \r\n        dbRef.on('value', (response) => {\r\n            const newState = [];\r\n            const data = response.val();\r\n            let arr = Object.values(data)\r\n            arr.forEach((obj) => {\r\n                newState.push({\r\n                    name: obj.name,\r\n                    physical: obj.physical,\r\n                    mental: obj.mental,\r\n                    energy: obj.energy,\r\n                })\r\n            })\r\n            this.setState({\r\n                goals: newState\r\n            })\r\n        })\r\n    }\r\n\r\n    showForm = (event) => {\r\n        event.preventDefault();\r\n        this.setState ({\r\n            showForm: true\r\n        })\r\n    }\r\n    \r\n    submit = (event) => {\r\n        event.preventDefault();\r\n        this.setState ({\r\n            showForm: false\r\n        })\r\n        let winner = ''\r\n\r\n        //math.abs gives absolute value so we can track difference regardless of more or less energy currently\r\n        this.state.goals.forEach((obj) => {\r\n            let x = 0\r\n            let currentBestVal = 1000\r\n            let currentBestName = ''\r\n            x = x + Math.abs(obj.physical - this.state.currentPhys) \r\n            x = x + Math.abs(obj.mental - this.state.currentMent)\r\n            x = x + Math.abs(obj.energy - this.state.currentEnergy)\r\n            if (x < currentBestVal){\r\n                currentBestVal = x\r\n                currentBestName = obj.name\r\n            }\r\n            winner = currentBestName\r\n            console.log('loop')\r\n        })\r\n        this.setState ({\r\n            bestOption: winner\r\n        })\r\n        console.log('done')\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        this.setState({\r\n            [event.target.name]: event.target.value\r\n        })\r\n    }\r\n\r\n    //Removes completed tasks from FB also pushes user to add more goals if they are now below 3\r\n    complete = () => {\r\n        const dbRef = firebase.database().ref(this.props.un)\r\n        dbRef.child(this.state.bestOption).remove();\r\n        this.setState ({\r\n            bestOption: ''\r\n        })\r\n        this.props.checkTaskCount()\r\n    }\r\n\r\n    render(){\r\n        if (this.state.showForm){\r\n            return (\r\n                <form className=\"centered\">\r\n                    <h2>How Are you Feeling Now?</h2>\r\n\r\n                    <div className=\"inputPair\">\r\n                        <label htmlFor=\"physical\">How physically energized are you?</label>\r\n                        <input type=\"range\" min=\"0\" max=\"10\" name=\"currentPhys\" value={this.state.currentPhys} onChange={this.handleChange}/>\r\n                    </div>\r\n\r\n                    <div className=\"inputPair\">\r\n                        <label htmlFor=\"mental\">How mentally energized are you?</label>\r\n                        <input type=\"range\" min=\"0\" max=\"10\" name=\"currentMent\" value={this.state.currentMent} onChange={this.handleChange}/>\r\n                    </div>\r\n\r\n                    <div className=\"inputPair\">\r\n                        <label htmlFor=\"energy\">How much energy do you have?</label>\r\n                        <input type=\"range\" min=\"0\" max=\"10\" name=\"currentEnergy\" value={this.state.currentEnergy} onChange={this.handleChange}/>\r\n                    </div>\r\n                    <button onClick={this.submit}>Submit</button>\r\n                </form>\r\n            )\r\n        //This only fires when displaying the user the suggested task... Was looking to add skip button here as well as a stretch goal but ran out of time.\r\n        }else if (this.state.bestOption !== ''){\r\n            return (\r\n                <div className=\"centered\">\r\n                    <p>The most suitable task for you currently is:</p>\r\n                    <h2>{this.state.bestOption}</h2>\r\n                    <button onClick={this.complete}>Mark Task as Complete</button>\r\n                </div>\r\n            )\r\n        }\r\n        return (\r\n            <div className=\"centered\">\r\n                <button onClick={this.showForm}>Choose a task for me!</button>\r\n                <button name=\"choosingGoals\" onClick={this.props.selectActive}>Add more goals!</button>\r\n                <ShowGoals un={this.props.un} />\r\n            </div>\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default ChooseTask","import React from 'react';\nimport './App.css';\nimport firebase from './firebase'\nimport NewGoals from './NewGoals';\nimport ChooseTask from './ChooseTask'\n\n\n//Removed authentication as per Juno notes to not include for projects\n//Choosing goal currently takes an extra click as a stretch goal was to allow the user to manually select a goal or skip the recommended, I started but did not finish this feature in time.\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      isLoggedIn: false,\n      choosingGoals: false,\n      choosingTask: false,\n      userNames: \"\",\n      currentUN: \"\",\n      numberOfGoals: 5,\n    }\n  }\n\n  //Gets list of usernames from firebase in order to compare user to list (this would normally be replaced by an auth)\n  componentDidMount() {\n    const dbRef = firebase.database().ref();\n    dbRef.once('value', (response) => {\n\n        const data = response.val();\n        const newState = Object.keys(data)\n\n        this.setState({\n            userNames: newState\n        })\n    })\n  }\n  \n  handleChangeUN = (event) => {\n    this.setState({\n        currentUN: event.target.value\n    })\n  }\n\n  login = (event) => {\n\n    //Wrapped in an if statement to prevent error when user leaves username blank\n    if (this.state.currentUN !== \"\"){\n      event.preventDefault();\n      const userNames = this.state.userNames\n      const un = this.state.currentUN\n      const dbRef = firebase.database().ref(this.state.currentUN)\n\n      //Greets user and renders choosingGoals component\n      if (userNames.includes(un)){\n          alert('Welcome back!')\n          this.setState({\n            choosingGoals:true\n          })\n      } else {\n          alert('I see you are new here, welcome!')\n          this.setState({\n            choosingGoals:true\n          })\n          //creates object in firebase with the un as the key\n          dbRef.set('')\n      }\n\n      //Removes login form\n      this.setState({\n        isLoggedIn: true\n      })\n\n      //Tracks how many goals there are in the user's object in Firebase\n      dbRef.on('value', (response) =>{\n        this.setState({\n          numberOfGoals: Object.keys(response.val()).length,\n        })\n\n      }); \n    }else {\n      alert('Please enter your name!')\n    }\n  }\n\n  //Used to switch between active components\n  selectActive = (event) => {\n    event.preventDefault();\n      this.setState({\n        choosingGoals: false,\n        choosingTask: false,\n        [event.target.name]: true\n      })\n  }\n  //If there are less than 3 goals currently in firebase it forces user to add another. \n  checkTaskCount = () => {\n    if (this.state.numberOfGoals <= 3){\n      this.setState({\n        choosingTask: false,\n        choosingGoals: true\n      })\n    }\n  }\n\n  render() {\n    if (this.state.isLoggedIn === false) {\n      return (\n        <div className = \"centered\">\n          <header>\n            <h1>Let's Get Productive!</h1>\n          </header>\n          <form className = \"loginForm\">\n              <input aria-label=\"Username\" type=\"text\" placeholder=\"Username\" value={this.state.currentUN} onChange={this.handleChangeUN} required/>\n              <button type=\"submit\" onClick={this.login}>Login</button>\n          </form>\n        </div>\n      )\n    }\n    if (this.state.choosingGoals){\n      return <NewGoals un={this.state.currentUN} numberOfGoals={this.state.numberOfGoals} goals={this.state.goals} selectActive={this.selectActive}/>\n  \n    }\n    if (this.state.choosingTask) {\n      return <ChooseTask checkTaskCount={this.checkTaskCount} selectActive={this.selectActive} un={this.state.currentUN} goals={this.state.goals}/>\n    }\n  }\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}