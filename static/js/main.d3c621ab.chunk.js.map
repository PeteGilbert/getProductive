{"version":3,"sources":["firebase.js","ShowGoals.js","NewGoals.js","ChooseTask.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","ShowGoals","props","state","goals","database","ref","this","un","on","response","newState","data","val","Object","values","forEach","obj","push","name","physical","mental","energy","setState","map","goal","key","className","React","Component","NewGoals","addGoal","dbRef","newGoal","child","set","handleChangeName","event","target","value","handleChangePhys","handleChangeMent","handleChangeEnergy","type","placeholder","onChange","htmlFor","min","max","onClick","ChooseTask","showForm","preventDefault","submit","winner","x","currentBestVal","currentBestName","Math","abs","currentPhys","currentMent","currentEnergy","bestOption","complete","remove","App","handleChangeUN","currentUN","handleClick","userNames","includes","alert","numberOfGoals","choosingTask","choosingGoals","isLoggedIn","keys","length","logout","selectChooseTask","once","userName","required","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d3c621ab.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBUg2ChT4L_XQS5_FOwPpAD8Ki4E1yR9_s\",\r\n    authDomain: \"project5-8ad8a.firebaseapp.com\",\r\n    databaseURL: \"https://project5-8ad8a.firebaseio.com\",\r\n    projectId: \"project5-8ad8a\",\r\n    storageBucket: \"project5-8ad8a.appspot.com\",\r\n    messagingSenderId: \"238062275039\",\r\n    appId: \"1:238062275039:web:7f9016ed5fc1e97f62dc6a\"\r\n};\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;\r\n","import React from 'react';\r\nimport firebase from './firebase';\r\n\r\nclass ShowGoals extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            goals: [],\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const dbRef = firebase.database().ref(this.props.un)\r\n        \r\n        dbRef.on('value', (response) => {\r\n            const newState = [];\r\n            const data = response.val();\r\n            let arr = Object.values(data)\r\n            arr.forEach((obj) => {\r\n                newState.push({\r\n                    name: obj.name,\r\n                    physical: obj.physical,\r\n                    mental: obj.mental,\r\n                    energy: obj.energy,\r\n                })\r\n            })\r\n            this.setState({\r\n                goals: newState\r\n            })\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>Current Goals:</h2>\r\n                <ul>\r\n                    {this.state.goals.map((goal) => {\r\n                        return (\r\n                        <div key ={goal.name}>\r\n                            <h3 className=\"goalDisplay\">{goal.name}</h3>\r\n                        </div>\r\n                        )\r\n                    })}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ShowGoals;","import React from 'react';\r\nimport firebase from './firebase';\r\nimport ShowGoals from './ShowGoals';\r\n\r\n\r\nclass NewGoals extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            newGoal: \"\",\r\n            physical: 0,\r\n            mental: 0,\r\n            energy: 0,\r\n        }\r\n    }\r\n\r\n    // componentDidMount() {\r\n    //     const dbRef = firebase.database().ref(this.props.un)\r\n    //     dbRef.on('value', (data) =>{\r\n    //         console.log(Object.keys(data.val()).length);\r\n    //     });\r\n    // }\r\n\r\n    addGoal = () => {\r\n        //push goal object to FB\r\n        const dbRef = firebase.database().ref(this.props.un)\r\n        let goal = {\r\n            name: this.state.newGoal,\r\n            physical: this.state.physical,\r\n            mental: this.state.mental,\r\n            energy: this.state.energy,\r\n        }\r\n        dbRef.child(this.state.newGoal).set(goal)\r\n        this.setState({\r\n            newGoal: \"\",\r\n            physical: 0,\r\n            mental: 0,\r\n            energy: 0,\r\n        })\r\n    }\r\n\r\n\r\n\r\n    handleChangeName = (event) => {\r\n        this.setState({\r\n            newGoal: event.target.value\r\n        })\r\n    }\r\n\r\n    handleChangePhys = (event) => {\r\n        this.setState({\r\n            physical: event.target.value\r\n        })\r\n    }\r\n\r\n    handleChangeMent = (event) => {\r\n        this.setState({\r\n            mental: event.target.value\r\n        })\r\n    }\r\n\r\n    handleChangeEnergy = (event) => {\r\n        this.setState({\r\n            energy: event.target.value\r\n        })\r\n    }\r\n\r\n\r\n    render () {\r\n        return (\r\n            <div className=\"centered\">\r\n                <h2>I'm going to need at least 3 goals in order to recommend a task for you!</h2>\r\n                <form className=\"newGoalsForm\">\r\n                    <input type=\"text\" placeholder=\"Enter your goal here!\" value={this.state.newGoal} onChange={this.handleChangeName}/>\r\n\r\n                    <div className=\"inputPair\">\r\n                        <label htmlFor=\"physical\">How physically demanding is this goal?</label>\r\n                        <input type=\"range\" min=\"0\" max=\"10\" name=\"physical\" value={this.state.physical} onChange={this.handleChangePhys}/>\r\n                    </div>\r\n\r\n                    <div className=\"inputPair\">\r\n                        <label htmlFor=\"mental\">How mentally demanding is this goal?</label>\r\n                        <input type=\"range\" min=\"0\" max=\"10\" name=\"mental\" value={this.state.mental} onChange={this.handleChangeMent}/>\r\n                    </div>\r\n\r\n                    <div className=\"inputPair\">\r\n                        <label htmlFor=\"energy\">How tiring is this goal?</label>\r\n                        <input type=\"range\" min=\"0\" max=\"10\" name=\"energy\" value={this.state.energy} onChange={this.handleChangeEnergy}/>\r\n                    </div>\r\n                </form>\r\n                <button onClick={this.addGoal}>Add Goal</button>\r\n                <ShowGoals un={this.props.un} />\r\n            </div>\r\n        )\r\n            \r\n    }\r\n}\r\n\r\nexport default NewGoals","import React from 'react';\r\nimport firebase from './firebase';\r\nimport ShowGoals from './ShowGoals';\r\n\r\nclass ChooseTask extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            goals: [],\r\n            showForm: false,\r\n            currentPhys: 0,\r\n            currentMent: 0,\r\n            currentEnergy: 0,\r\n            bestOption: '',\r\n\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const dbRef = firebase.database().ref(this.props.un)\r\n        \r\n        dbRef.on('value', (response) => {\r\n            const newState = [];\r\n            const data = response.val();\r\n            let arr = Object.values(data)\r\n            arr.forEach((obj) => {\r\n                newState.push({\r\n                    name: obj.name,\r\n                    physical: obj.physical,\r\n                    mental: obj.mental,\r\n                    energy: obj.energy,\r\n                })\r\n            })\r\n            this.setState({\r\n                goals: newState\r\n            })\r\n        })\r\n    }\r\n\r\n    showForm = (event) => {\r\n        event.preventDefault();\r\n        this.setState ({\r\n            showForm: true\r\n        })\r\n    }\r\n    \r\n    submit = (event) => {\r\n        event.preventDefault();\r\n        this.setState ({\r\n            showForm: false\r\n        })\r\n        let winner = ''\r\n\r\n        //math.abs gives absolute value so we can track difference regardless of more or less energy currently\r\n        this.state.goals.forEach((obj) => {\r\n            let x = 0\r\n            let currentBestVal = 1000\r\n            let currentBestName = ''\r\n            x = x + Math.abs(obj.physical - this.state.currentPhys) \r\n            x = x + Math.abs(obj.mental - this.state.currentMent)\r\n            x = x + Math.abs(obj.energy - this.state.currentEnergy)\r\n            if (x < currentBestVal){\r\n                currentBestVal = x\r\n                currentBestName = obj.name\r\n            }\r\n            winner = currentBestName\r\n        })\r\n        this.setState ({\r\n            bestOption: winner\r\n        })\r\n    }\r\n\r\n    handleChangePhys = (event) => {\r\n        this.setState({\r\n            currentPhys: event.target.value\r\n        })\r\n    }\r\n\r\n    handleChangeMent = (event) => {\r\n        this.setState({\r\n            currentMent: event.target.value\r\n        })\r\n    }\r\n\r\n    handleChangeEnergy = (event) => {\r\n        this.setState({\r\n            currentEnergy: event.target.value\r\n        })\r\n    }\r\n\r\n    complete = (event) => {\r\n        const dbRef = firebase.database().ref(this.props.un)\r\n        dbRef.child(this.state.bestOption).remove();\r\n        this.setState ({\r\n            bestOption: ''\r\n        })\r\n    }\r\n\r\n    render(){\r\n        if (this.state.showForm){\r\n            return (\r\n                <form className=\"centered\">\r\n                    <h2>How Are you Feeling Now?</h2>\r\n\r\n                    <div className=\"inputPair\">\r\n                        <label htmlFor=\"physical\">How physically energized are you?</label>\r\n                        <input type=\"range\" min=\"0\" max=\"10\" name=\"physical\" value={this.state.physical} onChange={this.handleChangePhys}/>\r\n                    </div>\r\n\r\n                    <div className=\"inputPair\">\r\n                        <label htmlFor=\"mental\">How mentally energized are you?</label>\r\n                        <input type=\"range\" min=\"0\" max=\"10\" name=\"mental\" value={this.state.mental} onChange={this.handleChangeMent}/>\r\n                    </div>\r\n\r\n                    <div className=\"inputPair\">\r\n                        <label htmlFor=\"energy\">How tired are you?</label>\r\n                        <input type=\"range\" min=\"0\" max=\"10\" name=\"energy\" value={this.state.energy} onChange={this.handleChangeEnergy}/>\r\n                    </div>\r\n                    <button onClick={this.submit}>Submit</button>\r\n                </form>\r\n            )\r\n        }\r\n        if (this.state.bestOption !== ''){\r\n            return (\r\n                <div className=\"centered\">\r\n                    <p>The most suitable task for you currently is:</p>\r\n                    <h2>{this.state.bestOption}</h2>\r\n                    <button onClick={this.complete}>Mark Task as Complete</button>\r\n                </div>\r\n            )\r\n        }\r\n        return (\r\n            <div className=\"centered\">\r\n                <button onClick={this.showForm}>Choose a task for me!</button>\r\n                <ShowGoals un={this.props.un} />\r\n            </div>\r\n\r\n\r\n\r\n            // <div className=\"centered\">\r\n            //     <button onClick={this.showForm}>Choose a task for me!</button>\r\n            //     <h2>Current Goals:</h2>\r\n            //     <ul>\r\n            //         {this.state.goals.map((goal) => {\r\n            //             console.log(this)\r\n            //             return (\r\n            //             <div key ={goal.name}>\r\n            //                 <h3 className=\"goalDisplay\">{goal.name}</h3>\r\n            //             </div>\r\n            //             )\r\n            //         })}\r\n            //     </ul>\r\n            // </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ChooseTask","import React from 'react';\nimport './App.css';\nimport firebase from './firebase'\nimport NewGoals from './NewGoals';\nimport ChooseTask from './ChooseTask'\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      isLoggedIn: false,\n      choosingGoals: false,\n      choosingTask: false,\n      userNames: \"\",\n      currentUN: \"\",\n      goals: {},\n      numberOfGoals: 5,\n    }\n  }\n\n  componentDidMount() {\n    const dbRef = firebase.database().ref();\n\n    // Storing Usernames from DB to check if existing\n    dbRef.once('value', (response) => {\n\n        const data = response.val();\n        const newState = Object.keys(data)\n\n        this.setState({\n            userNames: newState\n        })\n    })\n  }\n  \n  handleChangeUN = (event) => {\n    this.setState({\n        currentUN: event.target.value\n    })\n  }\n\n  handleClick = (event) => {\n    event.preventDefault();\n    const userNames = this.state.userNames\n    const un = this.state.currentUN\n    const dbRef = firebase.database().ref(this.state.currentUN)\n    if (userNames.includes(un)){\n        alert('Welcome back!')\n        if (this.state.numberOfGoals > 3){\n          this.setState({\n            choosingTask:true\n          })\n        }\n\n    } else {\n        alert('I see you are new here, welcome!')\n        this.setState({\n          choosingGoals:true\n        })\n        //creates object in firebase with the un as the key\n        dbRef.set('')\n    }\n\n    this.setState({\n      isLoggedIn: true\n    })\n\n    dbRef.on('value', (response) =>{\n      this.setState({\n        numberOfGoals: Object.keys(response.val()).length,\n      })\n\n  }); \n  }\n\n  logout = (event) => {\n    event.preventDefault();\n    this.setState({\n      isLoggedIn: false\n    })\n  }\n\n  selectChooseTask =(event) => {\n    event.preventDefault();\n    this.setState({\n      choosingGoals: false,\n      choosingTask: true\n    })\n  }\n\n  render() {\n    if (this.state.isLoggedIn === false) {\n      return (\n        <div className = \"centered\">\n          <header>\n            <h1>Let's Get Productive!</h1>\n          </header>\n          <form className = \"loginForm\">\n              <input type=\"text\" placeholder=\"Username\" value={this.state.userName} onChange={this.handleChangeUN} required/>\n              <button type=\"submit\" onClick={this.handleClick}>Login</button>\n          </form>\n        </div>\n      )\n    }\n    if (this.state.numberOfGoals < 3) {\n      return (\n        <div>\n          <NewGoals un={this.state.currentUN} numberOfGoals={this.state.numberOfGoals} goals={this.state.goals}/>\n          <button onClick={this.logout}>Logout</button>\n        </div>\n      )\n    }\n    else if (this.state.choosingGoals){\n      return (\n        <div className=\"centered\">\n          <NewGoals un={this.state.currentUN} numberOfGoals={this.state.numberOfGoals} goals={this.state.goals}/>\n          <button onClick={this.selectChooseTask}>Choose a Task</button>\n          <button onClick={this.logout}>Logout</button>\n        </div>\n      )\n    }\n    \n    if (this.state.choosingTask) {\n      return <ChooseTask un={this.state.currentUN} goals={this.state.goals}/>\n    }\n  }\n\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}