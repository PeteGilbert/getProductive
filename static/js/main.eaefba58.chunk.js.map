{"version":3,"sources":["firebase.js","NewGoals.js","ChooseTask.js","ShowGoals.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","NewGoals","addGoal","dbRef","database","ref","props","un","goal","name","state","newGoal","physical","mental","energy","child","set","setState","handleChangeName","event","target","value","handleChangePhys","handleChangeMent","handleChangeEnergy","className","type","placeholder","this","onChange","htmlFor","min","max","onClick","React","Component","ChooseTask","showForm","preventDefault","submit","winner","goals","forEach","obj","x","currentBestVal","currentBestName","Math","abs","currentPhys","currentMent","currentEnergy","bestOption","complete","remove","on","response","newState","data","val","console","log","Object","values","push","map","key","App","handleChangeUN","currentUN","handleClick","userNames","includes","alert","choosingTask","choosingGoals","isLoggedIn","numberOfGoals","keys","length","logout","selectChooseTask","once","required","userName","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+SAYAA,IAASC,cATc,CACnBC,OAAQ,0CACRC,WAAY,iCACZC,YAAa,wCACbC,UAAW,iBACXC,cAAe,6BACfC,kBAAmB,eACnBC,MAAO,8CAIIR,QAAf,EC2EeS,E,kDApFX,aAAe,IAAD,8BACV,gBAgBJC,QAAU,WAEN,IAAMC,EAAQX,EAASY,WAAWC,IAAI,EAAKC,MAAMC,IAC7CC,EAAO,CACPC,KAAM,EAAKC,MAAMC,QACjBC,SAAU,EAAKF,MAAME,SACrBC,OAAQ,EAAKH,MAAMG,OACnBC,OAAQ,EAAKJ,MAAMI,QAEvBX,EAAMY,MAAM,EAAKL,MAAMC,SAASK,IAAIR,GACpC,EAAKS,SAAS,CACVN,QAAS,GACTC,SAAU,EACVC,OAAQ,EACRC,OAAQ,KA/BF,EAqCdI,iBAAmB,SAACC,GAChB,EAAKF,SAAS,CACVN,QAASQ,EAAMC,OAAOC,SAvChB,EA2CdC,iBAAmB,SAACH,GAChB,EAAKF,SAAS,CACVL,SAAUO,EAAMC,OAAOC,SA7CjB,EAiDdE,iBAAmB,SAACJ,GAChB,EAAKF,SAAS,CACVJ,OAAQM,EAAMC,OAAOC,SAnDf,EAuDdG,mBAAqB,SAACL,GAClB,EAAKF,SAAS,CACVH,OAAQK,EAAMC,OAAOC,SAvDzB,EAAKX,MAAQ,CACTC,QAAS,GACTC,SAAU,EACVC,OAAQ,EACRC,OAAQ,GANF,E,qDA+DV,OACI,yBAAKW,UAAU,YACX,kGACA,8BACI,2BAAOC,KAAK,OAAOC,YAAY,wBAAwBN,MAAOO,KAAKlB,MAAMC,QAASkB,SAAUD,KAAKV,mBACjG,2BAAOY,QAAQ,YAAf,0CACA,2BAAOJ,KAAK,QAAQK,IAAI,IAAIC,IAAI,KAAKvB,KAAK,WAAWY,MAAOO,KAAKlB,MAAME,SAAUiB,SAAUD,KAAKN,mBAEhG,2BAAOQ,QAAQ,UAAf,wCACA,2BAAOJ,KAAK,QAAQK,IAAI,IAAIC,IAAI,KAAKvB,KAAK,SAASY,MAAOO,KAAKlB,MAAMG,OAAQgB,SAAUD,KAAKL,mBAE5F,2BAAOO,QAAQ,UAAf,4BACA,2BAAOJ,KAAK,QAAQK,IAAI,IAAIC,IAAI,KAAKvB,KAAK,SAASY,MAAOO,KAAKlB,MAAMI,OAAQe,SAAUD,KAAKJ,sBAEhG,4BAAQS,QAASL,KAAK1B,SAAtB,iB,GA9EOgC,IAAMC,WC2IdC,GC7ISF,IAAMC,U,kDDG1B,aAAe,IAAD,8BACV,gBAmCJE,SAAW,SAAClB,GACRA,EAAMmB,iBACN,EAAKrB,SAAU,CACXoB,UAAU,KAvCJ,EA2CdE,OAAS,SAACpB,GACNA,EAAMmB,iBACN,EAAKrB,SAAU,CACXoB,UAAU,IAEd,IAAIG,EAAS,GAGb,EAAK9B,MAAM+B,MAAMC,SAAQ,SAACC,GACtB,IAAIC,EAAI,EACJC,EAAiB,IACjBC,EAAkB,GACtBF,GAAQG,KAAKC,IAAIL,EAAI/B,SAAW,EAAKF,MAAMuC,aAC3CL,GAAQG,KAAKC,IAAIL,EAAI9B,OAAS,EAAKH,MAAMwC,cACzCN,GAAQG,KAAKC,IAAIL,EAAI7B,OAAS,EAAKJ,MAAMyC,gBACjCN,IACJA,EAAiBD,EACjBE,EAAkBH,EAAIlC,MAE1B+B,EAASM,KAEb,EAAK7B,SAAU,CACXmC,WAAYZ,KAjEN,EAqEdlB,iBAAmB,SAACH,GAChB,EAAKF,SAAS,CACVgC,YAAa9B,EAAMC,OAAOC,SAvEpB,EA2EdE,iBAAmB,SAACJ,GAChB,EAAKF,SAAS,CACViC,YAAa/B,EAAMC,OAAOC,SA7EpB,EAiFdG,mBAAqB,SAACL,GAClB,EAAKF,SAAS,CACVkC,cAAehC,EAAMC,OAAOC,SAnFtB,EAuFdgC,SAAW,SAAClC,GACM3B,EAASY,WAAWC,IAAI,EAAKC,MAAMC,IAC3CQ,MAAM,EAAKL,MAAM0C,YAAYE,SACnC,EAAKrC,SAAU,CACXmC,WAAY,MAzFhB,EAAK1C,MAAQ,CACT+B,MAAO,GACPJ,UAAU,EACVY,YAAa,EACbC,YAAa,EACbC,cAAe,EACfC,WAAY,IARN,E,gEAYO,IAAD,OACF5D,EAASY,WAAWC,IAAIuB,KAAKtB,MAAMC,IAE3CgD,GAAG,SAAS,SAACC,GAEf,IAAMC,EAAW,GACXC,EAAOF,EAASG,MACtBC,QAAQC,IAAIH,GACFI,OAAOC,OAAOL,GACpBhB,SAAQ,SAACC,GACTc,EAASO,KAAK,CACVvD,KAAMkC,EAAIlC,KACVG,SAAU+B,EAAI/B,SACdC,OAAQ8B,EAAI9B,OACZC,OAAQ6B,EAAI7B,YAIpB,EAAKG,SAAS,CACVwB,MAAOgB,S,+BAiEf,OAAI7B,KAAKlB,MAAM2B,SAEP,8BACI,wDACA,2BAAOP,QAAQ,YAAf,qCACA,2BAAOJ,KAAK,QAAQK,IAAI,IAAIC,IAAI,KAAKvB,KAAK,WAAWY,MAAOO,KAAKlB,MAAME,SAAUiB,SAAUD,KAAKN,mBAEhG,2BAAOQ,QAAQ,UAAf,mCACA,2BAAOJ,KAAK,QAAQK,IAAI,IAAIC,IAAI,KAAKvB,KAAK,SAASY,MAAOO,KAAKlB,MAAMG,OAAQgB,SAAUD,KAAKL,mBAE5F,2BAAOO,QAAQ,UAAf,sBACA,2BAAOJ,KAAK,QAAQK,IAAI,IAAIC,IAAI,KAAKvB,KAAK,SAASY,MAAOO,KAAKlB,MAAMI,OAAQe,SAAUD,KAAKJ,qBAC5F,4BAAQS,QAASL,KAAKW,QAAtB,WAIiB,IAAzBX,KAAKlB,MAAM0C,WAEP,6BACI,2EACA,4BAAKxB,KAAKlB,MAAM0C,YAChB,4BAAQnB,QAASL,KAAKyB,UAAtB,0BAKR,6BACI,4BAAQpB,QAASL,KAAKS,UAAtB,yBACA,4BACKT,KAAKlB,MAAM+B,MAAMwB,KAAI,SAACzD,GACnB,OACA,yBAAK0D,IAAM1D,EAAKC,MACZ,gCAASD,EAAKC,gB,GAjIjByB,IAAMC,YEmHhBgC,E,kDAhHb,aAAe,IAAD,8BACZ,gBA0BFC,eAAiB,SAACjD,GAChB,EAAKF,SAAS,CACVoD,UAAWlD,EAAMC,OAAOC,SA7BhB,EAiCdiD,YAAc,SAACnD,GACbA,EAAMmB,iBACN,IAAMiC,EAAY,EAAK7D,MAAM6D,UACvBhE,EAAK,EAAKG,MAAM2D,UAChBlE,EAAQX,EAASY,WAAWC,IAAI,EAAKK,MAAM2D,WAC7CE,EAAUC,SAASjE,IACnBkE,MAAM,iBACN,EAAKxD,SAAS,CACZyD,cAAa,MAGfD,MAAM,oCACN,EAAKxD,SAAS,CACZ0D,eAAc,IAGhBxE,EAAMa,IAAI,KAGd,EAAKC,SAAS,CACZ2D,YAAY,IAGdzE,EAAMoD,GAAG,SAAS,SAACG,GACjB,EAAKzC,SAAS,CACV4D,cAAef,OAAOgB,KAAKpB,EAAKC,OAAOoB,aA1DjC,EAgEdC,OAAS,SAAC7D,GACRA,EAAMmB,iBACN,EAAKrB,SAAS,CACZ2D,YAAY,KAnEF,EAuEdK,iBAAkB,SAAC9D,GACjBA,EAAMmB,iBACN,EAAKrB,SAAS,CACZ0D,eAAe,EACfD,cAAc,KAzEhB,EAAKhE,MAAQ,CACXkE,YAAY,EACZD,eAAe,EACfD,cAAc,EACdH,UAAW,GACXF,UAAW,GACXQ,cAAe,GARL,E,gEAYO,IAAD,OACJrF,EAASY,WAAWC,MAG5B6E,KAAK,SAAS,SAAC1B,GAEjB,IAAME,EAAOF,EAASG,MAChBF,EAAWK,OAAOgB,KAAKpB,GAE7B,EAAKzC,SAAS,CACVsD,UAAWd,S,+BA0DnB,OAA8B,IAA1B7B,KAAKlB,MAAMkE,WAEX,0BAAMnD,UAAY,aACd,2BAAOC,KAAK,OAAOC,YAAY,iBAAiBwD,UAAQ,EAAC9D,MAAOO,KAAKlB,MAAM0E,SAAUvD,SAAUD,KAAKwC,iBACpG,4BAAQ1C,KAAK,SAASO,QAASL,KAAK0C,aAApC,UAIJ1C,KAAKlB,MAAMiE,eAAiB/C,KAAKlB,MAAMmE,cAAgB,EAEvD,6BACE,kBAAC,EAAD,CAAUtE,GAAIqB,KAAKlB,MAAM2D,UAAWQ,cAAejD,KAAKlB,MAAMmE,gBAC9D,4BAAQ5C,QAASL,KAAKoD,QAAtB,WAIGpD,KAAKlB,MAAMiE,cAEhB,6BACE,kBAAC,EAAD,CAAUpE,GAAIqB,KAAKlB,MAAM2D,UAAWQ,cAAejD,KAAKlB,MAAMmE,gBAC9D,4BAAQ5C,QAASL,KAAKqD,kBAAtB,iBACA,4BAAQhD,QAASL,KAAKoD,QAAtB,WAKFpD,KAAKlB,MAAMgE,aACN,kBAAC,EAAD,CAAYnE,GAAIqB,KAAKlB,MAAM2D,iBADpC,M,GA3GcnC,IAAMC,WCMJkD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACL1C,QAAQ0C,MAAMA,EAAMC,c","file":"static/js/main.eaefba58.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/database';\r\n\r\nconst firebaseConfig = {\r\n    apiKey: \"AIzaSyBUg2ChT4L_XQS5_FOwPpAD8Ki4E1yR9_s\",\r\n    authDomain: \"project5-8ad8a.firebaseapp.com\",\r\n    databaseURL: \"https://project5-8ad8a.firebaseio.com\",\r\n    projectId: \"project5-8ad8a\",\r\n    storageBucket: \"project5-8ad8a.appspot.com\",\r\n    messagingSenderId: \"238062275039\",\r\n    appId: \"1:238062275039:web:7f9016ed5fc1e97f62dc6a\"\r\n};\r\nfirebase.initializeApp(firebaseConfig);\r\n\r\nexport default firebase;\r\n","import React from 'react';\r\nimport firebase from './firebase';\r\n\r\n\r\nclass NewGoals extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            newGoal: \"\",\r\n            physical: 0,\r\n            mental: 0,\r\n            energy: 0,\r\n        }\r\n    }\r\n\r\n    // componentDidMount() {\r\n    //     const dbRef = firebase.database().ref(this.props.un)\r\n    //     dbRef.on('value', (data) =>{\r\n    //         console.log(Object.keys(data.val()).length);\r\n    //     });\r\n    // }\r\n\r\n    addGoal = () => {\r\n        //push goal object to FB\r\n        const dbRef = firebase.database().ref(this.props.un)\r\n        let goal = {\r\n            name: this.state.newGoal,\r\n            physical: this.state.physical,\r\n            mental: this.state.mental,\r\n            energy: this.state.energy,\r\n        }\r\n        dbRef.child(this.state.newGoal).set(goal)\r\n        this.setState({\r\n            newGoal: \"\",\r\n            physical: 0,\r\n            mental: 0,\r\n            energy: 0,\r\n        })\r\n    }\r\n\r\n\r\n\r\n    handleChangeName = (event) => {\r\n        this.setState({\r\n            newGoal: event.target.value\r\n        })\r\n    }\r\n\r\n    handleChangePhys = (event) => {\r\n        this.setState({\r\n            physical: event.target.value\r\n        })\r\n    }\r\n\r\n    handleChangeMent = (event) => {\r\n        this.setState({\r\n            mental: event.target.value\r\n        })\r\n    }\r\n\r\n    handleChangeEnergy = (event) => {\r\n        this.setState({\r\n            energy: event.target.value\r\n        })\r\n    }\r\n\r\n\r\n    render () {\r\n        return (\r\n            <div className=\"newGoals\">\r\n                <h2>I'm going to need some goals in order to recommend a task for you!</h2>\r\n                <form>\r\n                    <input type=\"text\" placeholder=\"Enter your goal here!\" value={this.state.newGoal} onChange={this.handleChangeName}/>\r\n                    <label htmlFor=\"physical\">How physically demanding is this goal?</label>\r\n                    <input type=\"range\" min=\"0\" max=\"10\" name=\"physical\" value={this.state.physical} onChange={this.handleChangePhys}/>\r\n\r\n                    <label htmlFor=\"mental\">How mentally demanding is this goal?</label>\r\n                    <input type=\"range\" min=\"0\" max=\"10\" name=\"mental\" value={this.state.mental} onChange={this.handleChangeMent}/>\r\n\r\n                    <label htmlFor=\"energy\">How tiring is this goal?</label>\r\n                    <input type=\"range\" min=\"0\" max=\"10\" name=\"energy\" value={this.state.energy} onChange={this.handleChangeEnergy}/>\r\n                </form>\r\n                <button onClick={this.addGoal}>Add Goal</button>\r\n            </div>\r\n        )\r\n            \r\n    }\r\n}\r\n\r\nexport default NewGoals","import React from 'react';\r\nimport firebase from './firebase';\r\nimport ShowGoals from './ShowGoals';\r\n\r\nclass ChooseTask extends React.Component {\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            goals: [],\r\n            showForm: false,\r\n            currentPhys: 0,\r\n            currentMent: 0,\r\n            currentEnergy: 0,\r\n            bestOption: '',\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        const dbRef = firebase.database().ref(this.props.un)\r\n        \r\n        dbRef.on('value', (response) => {\r\n\r\n            const newState = [];\r\n            const data = response.val();\r\n            console.log(data)\r\n            let arr = Object.values(data)\r\n            arr.forEach((obj) => {\r\n                newState.push({\r\n                    name: obj.name,\r\n                    physical: obj.physical,\r\n                    mental: obj.mental,\r\n                    energy: obj.energy,\r\n                })\r\n            })\r\n            \r\n            this.setState({\r\n                goals: newState\r\n            })\r\n        })\r\n    }\r\n\r\n    showForm = (event) => {\r\n        event.preventDefault();\r\n        this.setState ({\r\n            showForm: true\r\n        })\r\n    }\r\n    \r\n    submit = (event) => {\r\n        event.preventDefault();\r\n        this.setState ({\r\n            showForm: false\r\n        })\r\n        let winner = ''\r\n\r\n        //math.abs gives absolute value so we can track difference regardless of more or less energy currently\r\n        this.state.goals.forEach((obj) => {\r\n            let x = 0\r\n            let currentBestVal = 1000\r\n            let currentBestName = ''\r\n            x = x + Math.abs(obj.physical - this.state.currentPhys) \r\n            x = x + Math.abs(obj.mental - this.state.currentMent)\r\n            x = x + Math.abs(obj.energy - this.state.currentEnergy)\r\n            if (x < currentBestVal){\r\n                currentBestVal = x\r\n                currentBestName = obj.name\r\n            }\r\n            winner = currentBestName\r\n        })\r\n        this.setState ({\r\n            bestOption: winner\r\n        })\r\n    }\r\n\r\n    handleChangePhys = (event) => {\r\n        this.setState({\r\n            currentPhys: event.target.value\r\n        })\r\n    }\r\n\r\n    handleChangeMent = (event) => {\r\n        this.setState({\r\n            currentMent: event.target.value\r\n        })\r\n    }\r\n\r\n    handleChangeEnergy = (event) => {\r\n        this.setState({\r\n            currentEnergy: event.target.value\r\n        })\r\n    }\r\n\r\n    complete = (event) => {\r\n        const dbRef = firebase.database().ref(this.props.un)\r\n        dbRef.child(this.state.bestOption).remove();\r\n        this.setState ({\r\n            bestOption: ''\r\n        })\r\n    }\r\n\r\n    render(){\r\n        if (this.state.showForm){\r\n            return (\r\n                <form>\r\n                    <h2>How Are you Feeling Now?</h2>\r\n                    <label htmlFor=\"physical\">How physically energized are you?</label>\r\n                    <input type=\"range\" min=\"0\" max=\"10\" name=\"physical\" value={this.state.physical} onChange={this.handleChangePhys}/>\r\n\r\n                    <label htmlFor=\"mental\">How mentally energized are you?</label>\r\n                    <input type=\"range\" min=\"0\" max=\"10\" name=\"mental\" value={this.state.mental} onChange={this.handleChangeMent}/>\r\n\r\n                    <label htmlFor=\"energy\">How tired are you?</label>\r\n                    <input type=\"range\" min=\"0\" max=\"10\" name=\"energy\" value={this.state.energy} onChange={this.handleChangeEnergy}/>\r\n                    <button onClick={this.submit}>Submit</button>\r\n                </form>\r\n            )\r\n        }\r\n        if (this.state.bestOption != ''){\r\n            return (\r\n                <div>\r\n                    <p>The most suitable task for you currently is:</p>\r\n                    <h2>{this.state.bestOption}</h2>\r\n                    <button onClick={this.complete}>Mark Task as Complete</button>\r\n                </div>\r\n            )\r\n        }\r\n        return (\r\n            <div>\r\n                <button onClick={this.showForm}>Choose a task for me!</button>\r\n                <ul>\r\n                    {this.state.goals.map((goal) => {\r\n                        return (\r\n                        <div key ={goal.name}>\r\n                            <button>{goal.name}</button>\r\n                        </div>\r\n                        )\r\n                    })}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ChooseTask","import React from 'react';\r\n\r\nclass ShowGoals extends React.Component {\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <ul>\r\n                {/* {this.props.goal.map((book) => {\r\n                    return (\r\n                    <div key ={book.name}>\r\n                        <li>{book.name}</li>\r\n                    </div>\r\n                    )\r\n                })} */}\r\n                </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default ShowGoals;","import React from 'react';\nimport './App.css';\nimport firebase from './firebase'\nimport NewGoals from './NewGoals';\nimport ChooseTask from './ChooseTask'\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      isLoggedIn: false,\n      choosingGoals: false,\n      choosingTask: false,\n      userNames: \"\",\n      currentUN: \"\",\n      numberOfGoals: 0,\n    }\n  }\n\n  componentDidMount() {\n    const dbRef = firebase.database().ref();\n\n    // Storing Usernames from DB to check if existing\n    dbRef.once('value', (response) => {\n\n        const data = response.val();\n        const newState = Object.keys(data)\n\n        this.setState({\n            userNames: newState\n        })\n    })\n  }\n  \n  handleChangeUN = (event) => {\n    this.setState({\n        currentUN: event.target.value\n    })\n  }\n\n  handleClick = (event) => {\n    event.preventDefault();\n    const userNames = this.state.userNames\n    const un = this.state.currentUN\n    const dbRef = firebase.database().ref(this.state.currentUN)\n    if (userNames.includes(un)){\n        alert('Welcome back!')\n        this.setState({\n          choosingTask:true\n        })\n    } else {\n        alert('I see you are new here, welcome!')\n        this.setState({\n          choosingGoals:true\n        })\n        //creates object in firebase with the un as the key\n        dbRef.set('')\n    }\n\n    this.setState({\n      isLoggedIn: true\n    })\n\n    dbRef.on('value', (data) =>{\n      this.setState({\n          numberOfGoals: Object.keys(data.val()).length\n      })\n  });\n    \n  }\n\n  logout = (event) => {\n    event.preventDefault();\n    this.setState({\n      isLoggedIn: false\n    })\n  }\n\n  selectChooseTask =(event) => {\n    event.preventDefault();\n    this.setState({\n      choosingGoals: false,\n      choosingTask: true\n    })\n  }\n\n  render() {\n    if (this.state.isLoggedIn === false) {\n      return (\n        <form className = \"loginForm\">\n            <input type=\"text\" placeholder=\"Enter Username\" required value={this.state.userName} onChange={this.handleChangeUN}/>\n            <button type=\"submit\" onClick={this.handleClick}>Login</button>\n        </form>\n      )\n    }\n    if (this.state.choosingGoals && this.state.numberOfGoals < 3) {\n      return (\n        <div>\n          <NewGoals un={this.state.currentUN} numberOfGoals={this.state.numberOfGoals}/>\n          <button onClick={this.logout}>Logout</button>\n        </div>\n      )\n    }\n    else if (this.state.choosingGoals){\n      return (\n        <div>\n          <NewGoals un={this.state.currentUN} numberOfGoals={this.state.numberOfGoals}/>\n          <button onClick={this.selectChooseTask}>Choose a Task</button>\n          <button onClick={this.logout}>Logout</button>\n        </div>\n      )\n    }\n    \n    if (this.state.choosingTask) {\n      return <ChooseTask un={this.state.currentUN}/>\n    }\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}